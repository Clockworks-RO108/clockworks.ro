---
import { Image } from "astro:assets";
import { type CollectionEntry, getCollection } from "astro:content";
import { ChevronLeft } from "lucide-react";

import { BorderedContainer } from "~/components/bordered-container";
import { TableOfContents, components } from "~/components/mdx";
import {
	Button,
	Badge,
	Grid,
	HStack,
	Link,
	Section,
	Text,
	VStack,
} from "~/components/ui";
import Layout from "~/components/ui/layout.astro";
import { getTranslations } from "~/lib";

export const getStaticPaths = async () => {
	const posts = await getCollection("blog", (post) => post.data.draft === false);

	return posts.map((post) => {
		const [lang, slug] = post.slug.split("/");

		return {
			params: { lang, slug },
			props: { post },
		};
	});
};

export type Props = {
	post: CollectionEntry<"blog">;
};

const lang = Astro.params.lang;
const t = getTranslations(lang);

const { post } = Astro.props as Props;
const {
	Content,
	remarkPluginFrontmatter: { minutesRead },
	headings,
} = await post.render();

const aproxMinutes = Math.ceil(minutesRead);
const readTime =
	aproxMinutes <= 1 ? t("projects.minute") : `${aproxMinutes} ${t("projects.minutes")}`;

const date = new Intl.DateTimeFormat("en-GB").format(post.data.publishedDate);

const categoryBadgeLabel = t(`categories.${post.data.category.id}`);

const image = {
	src: post.data.cover.src,
	alt: post.data.title,
};
---

<Layout title={post.data.title} description={post.data.description} image={image}>
	<Section className="mx-8 h-auto lg:h-auto">
		<VStack stretch="width" className="mb-8 lg:max-w-[80ch]">
			<Button as={Link.Nav} href={`/${lang}/blog`} variant="ghost" className="mb-4">
				<ChevronLeft />
				<span>{t("projects.go-back")}</span>
			</Button>

			<HStack alignment="baseline/between" className="gap-4">
				<Text.P>{readTime}</Text.P>

				<span>â€¢</span>

				<time datetime={date} transition:name={`blog-date__${post.slug}`}>
					<Text.P className="text-text-secondary">{date}</Text.P>
				</time>
			</HStack>

			<Text.H1 transition:name={`blog-title__${post.slug}`}>{post.data.title}</Text.H1>

			<HStack
				alignment="center/between"
				className="mt-4 [&>*+*]:before:pl-2 [&>*+*]:before:text-foreground [&>*+*]:before:content-['/']"
			>
				<div>
					<Badge color="brand" transition:name={`blog-badge__${post.slug}`}>
						{categoryBadgeLabel}
					</Badge>
				</div>
			</HStack>
		</VStack>

		<Image
			transition:name={`blog-image__${post.slug}`}
			src={post.data.cover}
			alt="cover image"
			class="rounded-md xl:max-w-6xl"
		/>
	</Section>

	<Section>
		<Grid stretch="width" cols={6} className="mx-8 mt-16 gap-12 lg:px-32">
			<aside class="col-[1/3] hidden lg:block">
				<BorderedContainer>
					<TableOfContents
						client:idle
						headings={headings}
						label={t("projects.table-of-contents")}
						defaultOpen={true}
					/>
				</BorderedContainer>
			</aside>

			<div class="col-span-6 lg:col-[3/7]">
				<article
					class="prose prose-invert mx-auto max-w-prose text-off-white-200 prose-headings:text-foreground prose-a:text-foreground prose-blockquote:border-l-brand-secondary prose-blockquote:bg-brand/20 lg:mx-0"
				>
					<BorderedContainer className="not-prose block lg:hidden">
						<TableOfContents
							client:idle
							headings={headings}
							label={t("projects.table-of-contents")}
							defaultOpen={false}
						/>
					</BorderedContainer>

					<Content components={components} />
				</article>
			</div>
		</Grid>
	</Section>
</Layout>
